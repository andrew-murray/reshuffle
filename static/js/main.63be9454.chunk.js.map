{"version":3,"sources":["TextEntryDialog.js","TitledDialog.js","TitleScreen.js","ChatDrawer.js","games/OthelloRules.js","games/OthelloBabelRules.js","games/OthelloBoard.js","games/OthelloGame.js","games/OthelloStatusBar.js","socket.js","App.js","reportWebVitals.js","index.js"],"names":["TextEntryDialog","props","React","useState","current","setCurrent","confirmAndReset","onConfirm","Dialog","open","onClose","onCancel","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","text","TextField","margin","fullWidth","onChange","e","target","value","onKeyDown","keyCode","preventDefault","autoFocus","DialogActions","Button","onClick","variant","TitledDialog","title","children","infoStyles","position","bottom","right","TitleScreen","history","useHistory","joinDialogOpen","setJoinDialogOpen","infoDialogOpen","setInfoDialogOpen","listItems","onCreate","push","map","item","ListItem","style","width","aria-label","Fragment","List","roomName","Typography","to","pathname","IconButton","color","ChatDrawer","state","currentMessage","messageItems","Array","this","messages","length","keys","messageIndex","ListItemText","primary","toString","onChatSend","event","onSend","setState","drawerStyle","Object","assign","display","flexDirection","alignItems","Drawer","anchor","className","Paper","overflow","flexGrow","onSubmit","Input","inputProps","alignSelf","Component","labels","empty","black","white","NEIGHBOUR_OFFSETS","opponentForPlayer","role","Error","isGameCoordinate","game","pos","addPositions","pos1","pos2","scaleOffset","scale","comparePosition","a","b","changesFromPlay","opponent","gameMaxSize","Math","max","changes","offset","adjPos","tokenRangeEnd","i","positionToFlip","outcome","sort","canPlay","exports","boardsEqual","y","x","changesForAllPositions","results","changeset","countCellsForRole","board","total","createBoardStateWithMove","boardClone","rowIndex","from","change","createEmptyBoardState","height","fill","createInitialBoardState","w","playerCanPlay","OthelloRules","OthelloCell","hovered","cellState","onMouseOver","onMouseOut","hoverColor","possible","colorForPlayer","player","impossibleColor","hoverColorForCellState","gameState","defaultColor","hoverIsDifferent","shadowBlur","onTap","onDblTap","opacity","undefined","OthelloBoard","availableMoves","showMovesForPlayer","makeCell","cellWidth","cellHeight","yStart","xStart","movePossible","filter","move","moveIsPossible","clickHandler","onMove","makeMove","boardPosition","rowArray","colArray","OfflineOthelloGame","action","updatedBoardState","nextPlayer","useStyles","makeStyles","theme","root","justifyContent","flexWrap","listStyle","padding","spacing","chip","OthelloStatusBar","classes","blackFirst","blackActive","active","whiteActive","firstActive","secondActive","Chip","icon","label","blackScore","whiteScore","ENDPOINT","URL","window","location","origin","process","SERVER_ENDPOINT","socket","io","notifyNoise","Audio","OthelloWithChat","activePlayer","status","joinedRoom","roomID","emit","connectToRoom","on","msg","concat","othelloState","stateInvalid","play","off","gameIsActive","canMakeMoves","styleForGame","content","disabled","StyledOthelloWithChat","withStyles","chatDrawer","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","type","useEffect","ThemeProvider","CssBaseline","exact","path","component","match","params","RouterRoot","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63be9454.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\n\nfunction TextEntryDialog(props) {\n\n  const [current, setCurrent] = React.useState(\"\");\n\n  const confirmAndReset = ()=>{\n    props.onConfirm(current);\n    setCurrent(\"\");\n  };\n\n  const handleEnter = (e) =>\n  {\n    if(e.keyCode === 13)\n    {\n      e.preventDefault();\n      confirmAndReset();\n    }\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onCancel} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {props.text}\n        </DialogContentText>\n        <TextField\n          margin=\"dense\"\n          id=\"name\"\n          fullWidth\n          onChange={(e)=>{setCurrent(e.target.value);}}\n          onKeyDown={handleEnter}\n          autoFocus\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onCancel} variant=\"contained\">\n          Cancel\n        </Button>\n        <Button onClick={confirmAndReset} variant=\"contained\">\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nTextEntryDialog.propTypes = {\n  text:PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func\n};\n\nexport default TextEntryDialog;\n","import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\n\nfunction TitledDialog(props) {\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle id=\"text-dialog-title\">{props.title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {props.children}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onClose} variant=\"contained\">\n          ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nTitledDialog.propTypes = {\n  title: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func\n};\n\nexport default TitledDialog;\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport { useHistory, Link } from \"react-router-dom\";\nimport TextEntryDialog from \"./TextEntryDialog\";\nimport TitledDialog from \"./TitledDialog\";\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nconst infoStyles = {\n  position:\"absolute\",\n  bottom: 0,\n  right: 0\n};\n\nfunction TitleScreen(props) {\n\n  const history = useHistory();\n\n  let [joinDialogOpen, setJoinDialogOpen] = React.useState(false);\n  let [infoDialogOpen, setInfoDialogOpen] = React.useState(false);\n\n  const menuItems = [\n    {text: \"Create Room\",onClick: props.onCreate},\n    {text: \"Join Room\", onClick: ()=>{setJoinDialogOpen(true);} },\n    {text: \"Practice\", onClick: ()=>{ history.push(\"/othello/practice\"); }}\n  ];\n\n  const listItems = menuItems.map( (item) =>\n    <ListItem key={item.text}>\n        <Button\n          variant=\"contained\" style={{width: \"100%\"}} aria-label={item.text}\n          onClick={item.onClick}\n        >\n          {item.text}\n        </Button>\n    </ListItem>\n  );\n\n  return (\n    <React.Fragment>\n      <List aria-label=\"menu\">\n        {listItems}\n      </List>\n      <TextEntryDialog\n        open={joinDialogOpen}\n        text=\"Enter room name\"\n        onConfirm={(roomName)=>{\n          if(roomName)\n          {\n            history.push(\"/othello/room/\" + roomName);\n            setJoinDialogOpen(false);\n          }\n        }}\n        onCancel={()=>{setJoinDialogOpen(false);}}\n      />\n      <TitledDialog\n        open={infoDialogOpen}\n        title=\"Attributions\"\n        onClose={()=>{setInfoDialogOpen(false)}}\n      >\n        <Typography>\n          reshuffle uses sounds from <Link\n            to={{ pathname: \"https://www.zapsplat.com/\" }}\n            target=\"_blank\"\n           >\n            zapsplat\n          </Link>\n        </Typography>\n      </TitledDialog>\n      <div style={infoStyles}>\n        <IconButton onClick={()=>{setInfoDialogOpen(true)}}>\n          <InfoIcon color=\"primary\"/>\n        </IconButton>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default TitleScreen;\n","import React from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\n\nclass ChatDrawer extends React.Component\n{\n    constructor(props)\n    {\n      super(props);\n      this.state = {\n        currentMessage: \"\"\n      }\n    }\n\n    render()\n    {\n      const messageItems = [...Array(this.props.messages.length).keys()].map(messageIndex=>\n        <ListItem key={\"message-\" + messageIndex.toString()}>\n          <ListItemText primary={this.props.messages[messageIndex]}>\n          </ListItemText>\n        </ListItem>\n      );\n\n      const onMessageChange = (event)=>\n      {\n        this.setState( {currentMessage: event.target.value} );\n      };\n\n      const onChatSend = (event)=>\n      {\n        if(this.state.currentMessage && this.props.onSend){\n          const currentMessage = this.state.currentMessage;\n          this.setState(\n            {currentMessage:\"\"},\n            ()=>{this.props.onSend(currentMessage);}\n          );\n        }\n        event.preventDefault();\n      };\n\n      const localStyle = {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-end\"\n      };\n      const drawerStyle = Object.assign( Object.assign({}, localStyle), this.props.style );\n\n      // another option for this list, is react-window?\n      return (\n          <Drawer\n            variant=\"permanent\"\n            anchor=\"right\"\n            style={drawerStyle}\n            className={this.props.className}\n          >\n            <Paper\n              // column-reverse means the browser will scroll to the bottom!\n              // todo: this may not be a long-term solution because all the\n              // chat is bottom aligned when the chat doesn't fill the page\n              style={{overflow: \"auto\", flexGrow: 1, display: \"flex\", flexDirection: \"column-reverse\", width: drawerStyle.width ? drawerStyle.width : \"inherit\"}}\n              >\n              <List aria-label=\"menu\" >\n                {messageItems}\n              </List>\n            </Paper>\n            <form onSubmit={onChatSend}>\n              <div style={{display: \"flex\"}}>\n                  <Input inputProps={{ 'aria-label': 'enter message' }} value={this.state.currentMessage} onChange={onMessageChange} style={{flexGrow: 1}}/>\n                  <Button variant=\"contained\" color=\"primary\" onClick={onChatSend} style={{alignSelf: \"flex-end\"}}>Send</Button>\n              </div>\n            </form>\n          </Drawer>\n      );\n    }\n}\n\nexport default ChatDrawer;\n","\nconst labels = {\n    empty: 0,\n    black: 1,\n    white: 2\n};\n\nconst NEIGHBOUR_OFFSETS = [\n    [-1, 0],\n    [-1, 1],\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n    [-1, -1]\n];\n\nconst opponentForPlayer = (role) => {\n  if(role !== labels.black && role !== labels.white)\n  {\n    throw Error(\n      \"Invalid player provided to opponentForPlayer: \" + role.toString()\n    );\n  }\n  return role === labels.black ? labels.white : labels.black;\n};\n\nconst isGameCoordinate = (game, pos) => {\n  return (\n    game.length >= 1 && // sanity check\n    0 <= pos[0] &&\n    pos[0] < game.length &&\n    0 <= pos[1] &&\n    pos[1] < game[0].length\n  );\n};\n\nconst addPositions = (pos1,pos2) => {\n  return [pos1[0] + pos2[0], pos1[1] + pos2[1]];\n};\n\nconst scaleOffset = (pos, scale) => {\n  return [pos[0] * scale, pos[1] * scale];\n}\n\nconst comparePosition = (a,b) => {\n  // negative value <=> a < b\n  // positive value <=> a > b\n  // 0 <=> a == b\n  if( a[0] !== b[0] )\n  {\n    return a[0] < b[0] ? -1 : +1;\n  }\n  else if( a[1] !== b[1] )\n  {\n    return a[1] < b[1] ? -1 : +1;\n  }\n  else\n  {\n    return 0;\n  }\n};\n\nconst changesFromPlay = (game, role, pos) =>\n{\n  if(game[pos[0]][pos[1]] === labels.white || game[pos[0]][pos[1]] === labels.black)\n  {\n    return {};\n  }\n  const opponent = opponentForPlayer(role);\n  const gameMaxSize = Math.max(game.length, game[0].length);\n\n  let changes = [];\n  for(const offset of NEIGHBOUR_OFFSETS)\n  {\n    const adjPos = addPositions(pos, offset);\n    if(isGameCoordinate(game, adjPos) && game[adjPos[0]][adjPos[1]] === opponent)\n    {\n      let tokenRangeEnd = null;\n      for(let i = 2; i < gameMaxSize; ++i)\n      {\n        const positionToFlip = addPositions( pos, scaleOffset(offset, i) );\n        if(!isGameCoordinate(game, positionToFlip))\n        {\n          // reached the end of the board, haven't found a valid range to flip\n          break;\n        }\n        else if( game[positionToFlip[0]][positionToFlip[1]] === role )\n        {\n          // reached the end of a valid array of tokens to flip\n          tokenRangeEnd = i;\n          break;\n        }\n        else if( game[positionToFlip[0]][positionToFlip[1]] === opponent )\n        {\n          // still covering a valid array of opponent's pieces, continue\n          continue;\n        }\n        else\n        {\n          // reached the end of a range of opponent's pieces and met an empty square\n          // player == role will not \"enclose\" this range, no changes are valid\n          break;\n        }\n      }\n\n      // populate changes based on the assessed range, could be handled\n      // inside the loop instead\n      if(tokenRangeEnd)\n      {\n        for(let i = 1; i < tokenRangeEnd; ++i)\n        {\n          const positionToFlip = addPositions( pos, scaleOffset(offset, i) );\n          changes.push( {\n            position: positionToFlip,\n            outcome: role\n          } );\n        }\n      }\n    }\n  }\n  if(changes.length === 0)\n  {\n    return [];\n  }\n  // note we include the played upon square in the list of changes\n  // we handle that here, so that it isn't included at the end of multiple ranges\n  changes.push( {\n    position: pos,\n    outcome: role\n  } );\n  changes.sort((a,b)=>comparePosition(a.position, b.position));\n  return changes;\n};\n\nconst canPlay = (game, role, pos) => {\n  if(!isGameCoordinate(game, pos))\n  {\n    return false;\n  }\n  if(game[pos[0]][pos[1]] !== labels.empty)\n  {\n      return false;\n  }\n  const changes = changesFromPlay(game, role, pos);\n  // othello rules dictate the only plays you can make\n  // are those which change opposing pieces\n  return changes.length > 0;\n};\n\nconst playerCanPlay = (game, role) => {\n  for(const y of [...Array(game.length).keys()])\n  {\n    for(const x of [...Array(game[0].length).keys()])\n    {\n      if(canPlay(game, role, [y,x]))\n      {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst createBoardStateWithMove = (game, position, role) => {\n  const changes = changesFromPlay(game, role, position);\n  let boardClone = [...Array(game.length).keys()].map(\n    rowIndex => Array.from(game[rowIndex])\n  );\n  for(const change of changes )\n  {\n    boardClone[ change.position[0] ][ change.position[1] ] = change.outcome;\n  }\n  return boardClone;\n}\n\nconst createEmptyBoardState = (height, width) => {\n  const e = labels.empty;\n  return [...Array(height).keys()].map((rowIndex)=>{\n    // empty rows\n    return Array(width).fill(e);\n  });\n}\n\nconst boardsEqual = (a,b)=>\n{\n  // todo: validate boards are square\n  if(a.length !== b.length || a[0].length !== b[0].length)\n  {\n    return false;\n  }\n  for(const y of [...Array(a.length).keys()])\n  {\n    for(const x of [...Array(b[0].length).keys()])\n    {\n      if(a[y][x] !== b[y][x])\n      {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst countCellsForRole = (board, role) =>\n{\n  let total = 0;\n  for(const y of [...Array(board.length).keys()])\n  {\n    for(const x of [...Array(board[0].length).keys()])\n    {\n      if(board[y][x] === role)\n      {\n        total++;\n      }\n    }\n  }\n  return total;\n}\n\nconst createInitialBoardState = () => {\n  const e = labels.empty;\n  const w = labels.white;\n  const b = labels.black;\n  return [\n    [e,e,e,e,e,e,e,e],\n    [e,e,e,e,e,e,e,e],\n    [e,e,e,e,e,e,e,e],\n    [e,e,e,b,w,e,e,e],\n    [e,e,e,w,b,e,e,e],\n    [e,e,e,e,e,e,e,e],\n    [e,e,e,e,e,e,e,e],\n    [e,e,e,e,e,e,e,e]\n  ];\n};\n\nconst changesForAllPositions = (game, role) => {\n  if(game.length === 0)\n  {\n    return [];\n  }\n  let results = [];\n  for(const y of [...Array(game.length).keys()])\n  {\n    for(const x of [...Array(game[0].length).keys()])\n    {\n      const changes = changesFromPlay(game, role, [y,x]);\n      if(changes.length > 0)\n      {\n        results.push({position: [y,x], changeset: changes});\n      }\n    }\n  }\n  return results;\n}\n\nexports.boardsEqual = boardsEqual;\nexports.canPlay = canPlay;\nexports.changesForAllPositions = changesForAllPositions;\nexports.comparePosition = comparePosition;\nexports.countCellsForRole = countCellsForRole;\nexports.createBoardStateWithMove = createBoardStateWithMove;\nexports.createEmptyBoardState = createEmptyBoardState;\nexports.createInitialBoardState = createInitialBoardState;\nexports.changesFromPlay = changesFromPlay;\nexports.isGameCoordinate = isGameCoordinate;\nexports.opponentForPlayer = opponentForPlayer;\nexports.playerCanPlay = playerCanPlay;\nexports.labels = labels;\n","import * as OthelloRules from \"./OthelloRules.js\";\nexport default OthelloRules;\n","import React, { Component } from 'react';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport OthelloRules from \"./OthelloBabelRules\";\n\nclass OthelloCell extends React.Component{\n\n  state = {\n    hovered: false\n  }\n\n  render(){\n    const onMouseOver = () => {\n      this.setState({hovered: true});\n    };\n\n    const onMouseOut = () => {\n      this.setState({hovered: false});\n    };\n\n    const defaultColorForCellState = (cellState) => {\n      return cellState === OthelloRules.labels.white ? \"white\"\n           : cellState === OthelloRules.labels.black ? \"black\"\n                                                     : \"#b87340\";\n    };\n\n    const hoverColorForCellState = (cellState, possible) => {\n      const colorForPlayer = this.props.player === OthelloRules.labels.white ? \"white\" : \"black\";\n      return cellState === OthelloRules.labels.white ? \"white\"\n           : cellState === OthelloRules.labels.black ? \"black\"\n           : possible                     ? colorForPlayer\n                                          : this.props.impossibleColor;\n    };\n\n    const hoverColor = hoverColorForCellState(this.props.gameState, this.props.possible);\n    const defaultColor = defaultColorForCellState(this.props.gameState);\n    const hoverIsDifferent = hoverColor !== defaultColor;\n\n    return(\n      <React.Fragment>\n        <Rect\n          y={this.props.y}\n          x={this.props.x}\n          width={this.props.width}\n          height={this.props.height}\n\n          fill={\"#b87340\"}\n          shadowBlur={5}\n\n          onClick={this.props.onClick}\n          onTap={this.props.onClick}\n          onDblTap={this.props.onClick}\n\n          onMouseOver={onMouseOver}\n          onMouseOut={onMouseOut}\n        />\n        <Circle\n          y={this.props.y + (this.props.height/2)}\n          x={this.props.x + (this.props.width/2)}\n          width={this.props.width * 0.85}\n          height={this.props.height * 0.85}\n\n          fill={this.state.hovered ? hoverColor: defaultColor}\n          opacity={(hoverIsDifferent && this.state.hovered) ? 0.5 : undefined }\n\n          onClick={this.props.onClick}\n          onTap={this.props.onClick}\n          onDblTap={this.props.onClick}\n\n          onMouseOver={onMouseOver}\n          onMouseOut={onMouseOut}\n        />\n      </React.Fragment>\n    );\n  }\n};\n\n\nclass OthelloBoard extends Component {\n  render() {\n    let availableMoves = [];\n    if(this.props.showMovesForPlayer)\n    {\n      availableMoves = OthelloRules.changesForAllPositions(\n        this.props.game,\n        this.props.showMovesForPlayer\n      );\n    }\n\n    const width = this.props.width;\n    const height = this.props.height;\n\n    const rows = 8;\n    const columns = 8;\n\n    const moveIsPossible = (cellState, pos) =>\n    {\n      const empty = cellState === OthelloRules.labels.empty;\n      return empty && availableMoves.filter(\n        move => move.position[0] === pos[0] && move.position[1] === pos[1]\n      ).length > 0;\n    };\n\n    const makeMove = (y,x,possible)=>\n    {\n      if(this.props.onMove && possible)\n      {\n        this.props.onMove( {position: [y,x]} );\n      }\n    };\n\n    const makeCell = (y,x,cellState) => {\n      const cellWidth = width / columns;\n      const cellHeight =  height / rows;\n      const yStart = y * cellHeight;\n      const xStart = x * cellWidth;\n      const movePossible = moveIsPossible(cellState, [y,x]);\n      const clickHandler = movePossible ? (event)=>{makeMove(y,x,true)} : undefined;\n      return (\n        <OthelloCell\n          key={\"othello-cell-\" + y.toString() + \"-\" + x.toString()}\n          width={cellWidth}\n          height={cellHeight}\n          boardPosition={[y,x]}\n          player={this.props.showMovesForPlayer}\n          x={xStart}\n          y={yStart}\n          gameState={cellState}\n          possible={movePossible}\n          onClick={clickHandler}\n        />\n      );\n    };\n\n    const rowArray = [...Array(rows).keys()];\n    const colArray = [...Array(columns).keys()];\n\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    return (\n      <Stage width={width} height={height} style={this.props.style}>\n        <Layer>\n          {\n            rowArray.map( y => { return colArray.map( x => makeCell(y,x,this.props.game[y][x]))})\n          }\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default OthelloBoard;\n","import {Component} from \"react\"\nimport OthelloBoard from \"./OthelloBoard\"\nimport OthelloRules from \"./OthelloBabelRules\";\n\nclass OfflineOthelloGame extends Component\n{\n  state = {\n    game: OthelloRules.createInitialBoardState(),\n    player: OthelloRules.labels.black\n  }\n\n  render()\n  {\n    return (\n      <OthelloBoard\n        width={400}\n        height={400}\n        game={this.state.game}\n        showMovesForPlayer={this.state.player}\n        onMove={(action)=>{\n          if(action.position)\n          {\n            const updatedBoardState = OthelloRules.createBoardStateWithMove(\n              this.state.game,\n              action.position,\n              this.state.player\n            );\n            const opponent = OthelloRules.opponentForPlayer(this.state.player);\n            const opponentCanPlay = OthelloRules.playerCanPlay(\n              updatedBoardState,\n              opponent\n            );\n            const nextPlayer = opponentCanPlay ? opponent: this.state.player;\n            this.setState( {\n              game: updatedBoardState,\n              player: nextPlayer\n            } );\n          }\n        }}\n      />\n    );\n  }\n}\n\n\nexport {OfflineOthelloGame};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OthelloRules from \"./OthelloBabelRules\";\nimport Chip from '@material-ui/core/Chip';\nimport CircleIcon from '@material-ui/icons/FiberManualRecord';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nfunction OthelloStatusBar(props) {\n\n  const classes = useStyles();\n  const blackFirst = props.role === OthelloRules.labels.black;\n  const blackActive = OthelloRules.labels.black === props.active;\n  const whiteActive = OthelloRules.labels.white === props.active;\n  const firstActive = (blackFirst && blackActive) || (!blackFirst && whiteActive);\n  const secondActive = (!blackFirst && blackActive) || (blackFirst && whiteActive);\n\n  return (\n    <div className={classes.root} style={{margin: \"1vh\"}}>\n        <Chip key=\"score-1\"\n          icon={<CircleIcon style={{color: blackFirst ? \"#000000\" : \"#ffffff\"}}/>}\n          label={blackFirst ? props.blackScore : props.whiteScore}\n          className={classes.chip}\n          style={firstActive ? undefined : {opacity: \"50%\"}}\n        />\n        <Chip key=\"score-2\"\n          icon={<CircleIcon style={{color: blackFirst ? \"#ffffff\" : \"#000000\"}}/>}\n          label={blackFirst ? props.whiteScore : props.blackScore }\n          className={classes.chip}\n          style={secondActive ? undefined : {opacity: \"50%\"}}\n        />\n    </div>\n  );\n}\n\nexport default OthelloStatusBar;\n","import io from \"socket.io-client\";\n\nconst path = new URL( window.location.origin );\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? process.env.SERVER_ENDPOINT ? process.env.SERVER_ENDPOINT\n                                                                                     : \"wss://reshuffle.herokuapp.com/\"\n                                                       : \"wss://\" + path.hostname + \":8080\";\nlet socket = io(ENDPOINT);\nexport default socket;\n","import './App.css';\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport TitleScreen from \"./TitleScreen\";\nimport ChatDrawer from \"./ChatDrawer\";\nimport OthelloBoard from \"./games/OthelloBoard\"\nimport OthelloRules from \"./games/OthelloBabelRules\";\nimport {OfflineOthelloGame} from \"./games/OthelloGame\"\nimport OthelloStatusBar from \"./games/OthelloStatusBar\"\nimport { useHistory } from \"react-router-dom\";\nimport socket from \"./socket\"\n\nconst othelloStyles = (theme) => { return {\n  root: {\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  chatDrawer: {\n    width: 300\n  }\n} };\n\nconst notifyNoise = new Audio(\"/zapsplat_impacts_wood_thin_small_panel_knock_hit_lite_muted_004_39796.mp3\");\n\nclass OthelloWithChat extends React.Component\n{\n  state = {\n    messages: [],\n    board: null,\n    role: null,\n    activePlayer: null,\n    status: null,\n    joinedRoom: null\n  }\n\n  connectToRoom(roomID)\n  {\n    if((this.state.joinedRoom !== roomID))\n    {\n      this.setState(\n        { joinedRoom: roomID },\n        () => {\n          socket.emit('chat.join', roomID);\n          socket.emit(\"othello.join\", roomID);\n        }\n      );\n    }\n  }\n\n  componentDidMount() {\n    this.connectToRoom(this.props.roomID);\n    socket.on('chat.message', (msg)=>{\n      this.setState( (state, props) => {\n          return {messages: state.messages.concat(msg)};\n      });\n    });\n    socket.on('othello.update', (othelloState)=>{\n      this.setState((state,props)=>{\n        const stateInvalid = !state.board\n          || !state.activePlayer\n          || !state.role\n          || !state.status;\n        if( stateInvalid\n          || othelloState.role !== state.role\n          || othelloState.activePlayer !== state.activePlayer\n          || othelloState.status !== state.status\n          || !OthelloRules.boardsEqual(state.board, othelloState.board))\n        {\n          if(!stateInvalid)\n          {\n            notifyNoise.play();\n          }\n          return {\n            board: othelloState.board,\n            activePlayer: othelloState.activePlayer,\n            role: othelloState.role,\n            status: othelloState.status\n          };\n        }\n        else\n        {\n          return {};\n        }\n      })\n    });\n  }\n\n  componentDidUpdate()\n  {\n    this.connectToRoom(this.props.roomID);\n  }\n\n  componentWillUnmount()\n  {\n    socket.off('chat.message');\n    socket.off('othello.update');\n  }\n\n  render()\n  {\n    const sendSwap = () =>\n    {\n      if(this.state.role!== null)\n      {\n        socket.emit(\"othello.swap\");\n      }\n    };\n\n    const sendReset = () =>\n    {\n      if(this.state.role!== null && socket)\n      {\n        socket.emit(\"othello.reset\");\n      }\n    };\n\n    const sendConcede = () =>\n    {\n      if(this.state.role!==null)\n      {\n        socket.emit(\"othello.concede\");\n      }\n    }\n\n    const whiteScore = !this.state.board ? 0 :\n      OthelloRules.countCellsForRole(this.state.board, OthelloRules.labels.white);\n    const blackScore = !this.state.board ? 0 :\n      OthelloRules.countCellsForRole(this.state.board, OthelloRules.labels.black);\n\n    const gameIsActive = this.state.status === \"active\";\n    const canMakeMoves = this.state.role === this.state.activePlayer ? this.state.role: null;\n    const styleForGame = this.state.activePlayer === null ? {opacity: \"50%\"} : undefined;\n\n    return (\n      <div className={this.props.classes.root}>\n        <main className={this.props.classes.content}>\n          <OthelloBoard\n            width={400}\n            height={400}\n            game={this.state.board === null ? OthelloRules.createEmptyBoardState(8,8) : this.state.board}\n            // provide a player, OthelloBoard requires one for now\n            showMovesForPlayer={canMakeMoves}\n            onMove={(action)=>{\n              if(action.position)\n              {\n                socket.emit(\"othello.move\", action);\n              }\n            }}\n            style={styleForGame}\n          />\n          <OthelloStatusBar\n            role={this.state.role}\n            active={this.state.activePlayer}\n            whiteScore={whiteScore}\n            blackScore={blackScore}\n          />\n          {this.state.role ?\n            <div style={{padding: \"1vh\"}}>\n              <Button variant=\"contained\" onClick={sendSwap} disabled={gameIsActive} color=\"primary\"> Swap </Button>\n              <Button variant=\"contained\" onClick={sendReset} disabled={gameIsActive} color=\"primary\"> Reset </Button>\n              <Button variant=\"contained\" onClick={sendConcede} disabled={!gameIsActive} color=\"primary\"> Concede </Button>\n            </div>\n            : <Paper style={{padding: \"1vh\"}}><Typography>You are observing.</Typography></Paper>\n          }\n        </main>\n        <ChatDrawer\n          messages={this.state.messages}\n          onSend={(msg)=>{socket.emit(\"chat.message\", msg);}}\n          style={{width: \"300px\"}}\n        />\n      </div>\n    );\n  }\n}\n\nconst StyledOthelloWithChat = withStyles(othelloStyles)(OthelloWithChat);\n\nfunction App() {\n\n  let history = useHistory();\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  React.useEffect(()=>{\n    socket.on(\"room.created\", (roomID)=>\n    {\n      history.push(\"othello/room/\" + roomID);\n    })\n    return ()=>{socket.off(\"room.created\");}\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\">\n              <TitleScreen\n                onCreate={()=>{socket.emit(\"chat.create\");}}\n              />\n            </Route>\n            <Route exact path=\"/othello/practice\">\n              <OfflineOthelloGame />\n            </Route>\n            <Route\n              path=\"/othello/room/:roomID/\"\n              component={(props)=> <StyledOthelloWithChat roomID={props.match.params.roomID} />}\n            />\n          </Switch>\n        </div>\n    </ThemeProvider>\n  );\n}\n\nfunction RouterRoot()\n{\n  return (\n    <Router>\n      <App/>\n    </Router>\n  );\n}\n\nexport default RouterRoot;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}